<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_camera</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SHIFT_SPEED = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check(vk_left)) || (keyboard_check(ord('A'))) {
    x -= SU*2;
}
if (keyboard_check(vk_up)) || (keyboard_check(ord('W'))) {
    y -= SU*2;
}
if (keyboard_check(vk_right)) || (keyboard_check(ord('D'))) {
    x += SU*2;
}
if (keyboard_check(vk_down)) || (keyboard_check(ord('S'))) {
    y += SU*2;
}

// reset alarm
alarm[1] = CAMERA_ALARM_FAST;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check(vk_left)) || (keyboard_check(ord('A'))) {
    x -= SU;
}
if (keyboard_check(vk_up)) || (keyboard_check(ord('W'))) {
    y -= SU;
}
if (keyboard_check(vk_right)) || (keyboard_check(ord('D'))) {
    x += SU;
}
if (keyboard_check(vk_down)) || (keyboard_check(ord('S'))) {
    y += SU;
}

// reset alarm
alarm[1] = CAMERA_ALARM_FAST;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check(vk_left)) || (keyboard_check(ord('A'))) {
    x -= SU;
}
if (keyboard_check(vk_up)) || (keyboard_check(ord('W'))) {
    y -= SU;
}
if (keyboard_check(vk_right)) || (keyboard_check(ord('D'))) {
    x += SU;
}
if (keyboard_check(vk_down)) || (keyboard_check(ord('S'))) {
    y += SU;
}

// reset alarm
alarm[1] = CAMERA_ALARM_FAST;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// movement controls--------------


// press once:
if (keyboard_check_pressed(vk_left)) || (keyboard_check_pressed(ord('A')))
    x -= SU;
if (keyboard_check_pressed(vk_up)) || (keyboard_check_pressed(ord('W')))
    y -= SU;
if (keyboard_check_pressed(vk_right)) || (keyboard_check_pressed(ord('D')))
    x += SU;
if (keyboard_check_pressed(vk_down)) || (keyboard_check_pressed(ord('S')))
    y += SU;

// hold down:
if (keyboard_check(vk_left)) || (keyboard_check(ord('A'))) ||
    (keyboard_check(vk_up)) || (keyboard_check(ord('W'))) ||
    (keyboard_check(vk_right)) || (keyboard_check(ord('D'))) ||
    (keyboard_check(vk_down)) || (keyboard_check(ord('S'))) {
    if (alarm[0] == -1) &amp;&amp; (alarm[2] == -1)
        alarm[0] = CAMERA_ALARM;
}


// hold shift:
if (keyboard_check(vk_shift)) &amp;&amp; (alarm[2] == -1)
    alarm[2] = CAMERA_ALARM_SHIFT;


// stop alarm on release:
if (keyboard_check_released(vk_left)) || (keyboard_check_released(ord('A'))) ||
    (keyboard_check_released(vk_up)) || (keyboard_check_released(ord('W'))) ||
    (keyboard_check_released(vk_right)) || (keyboard_check_released(ord('D'))) ||
    (keyboard_check_released(vk_down)) || (keyboard_check_released(ord('S'))) {
    alarm[0] = -1;
    alarm[1] = -1;
    alarm[2] = -1;
}


// don't let the camera go off screen:
if (x &lt; VIEW_BOARDER)
    x = VIEW_BOARDER;
if (x &gt; (room_width - VIEW_BOARDER))
    x = (room_width - VIEW_BOARDER);
if (y &lt; VIEW_BOARDER)
    y = VIEW_BOARDER;
if (y &gt; (room_height - VIEW_BOARDER))
    y = (room_height - VIEW_BOARDER);



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
