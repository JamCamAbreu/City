<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-12</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Controllers/Setup ---------------
global.mainID = id;

// top bar:
drawTopBarInfo = false;

// money system:
global.money = 0;

// cycles/date system:
global.year = 1990;
global.season = SEASON_SUMMER;
global.month = MONTH_JUL;
global.cycleCount = 0;
global.curtainClosed = false;


// the IDList stores all the ID's of game objects
IDList = instance_create(x,y, obj_IDList);

// generate the map------------------
// TODO: pass in a size of map
// TODO: pass in the amount of trees and water
    // this can be a slider in the map selection options
mapGenerator = instance_create(x,y, obj_mapGenerate);
mapGenerator.IDList = IDList;



// Menu/Bars------------------

purchaseBar = instance_create(x, y, obj_purchaseBar);
topBar = instance_create(x, y, obj_topBar);

mode = MODE_NORMAL; // default
modeCheck = true;
currentSelection = BTYPE_TREES; // default
ds_selectedBuilding = ds_list_create();

// Other: ---------------------

// camera:
camera = instance_create(view_wview/2,view_hview/2, obj_camera);

// the mouse changes depending on the task at hand
mouseID = instance_create(mouse_x, mouse_y, obj_mouse);

// puts instance count in window boarder:
debugger = instance_create(x,y, obj_debugger);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cycle updating

/*
Every 8 cycles are a month. 
Each season is broken into 24 cycles. 
Each year is broken into 72 cycles

Cycles are 3 seconds long on normal speed. (60 frames/second, so 180 frames). 

That means that: 
    every month on normal speed is 24 seconds, 
    every season is 72 seconds, 
    every year is 288 seconds or about 5 minutes.
*/

scr_cycleUpdate();

// update every 3 seconds:
alarm[1] = CYCLE_UPDATE_SPEED;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// mode checking:
// this prevents modes from interfearing with each other:

modeCheck = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(ord('R'))) {
    room_restart();
}

// MODES----------------------
if (modeCheck) {
    switch (mode) {
        case MODE_NORMAL:
            scr_modeNormal();
            break;
            
        case MODE_SELECT:
            scr_modeSelect();
            break;
            
        case MODE_PLACEMENT:    
            scr_modePlacement();
            break;
            
        default:
            break;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*

var color = c_white;
draw_set_font(ft_default);

var myString;
switch (mode) {
    case MODE_NORMAL:
        myString = "MODE_NORMAL";
        break;
    case MODE_SELECT:
        myString = "MODE_SELECT";
        break;
    case MODE_PLACEMENT:
        myString = "MODE_PLACEMENT";
        break;

}
draw_text_colour(view_xview + view_wview/3, view_yview + 32*1, "Mode: " + myString, color, color, color, color, 1);

draw_set_font(ft_default);
*/

/*
draw_set_font(ft_default);
var color = c_white;
draw_text_colour(view_xview + view_wview/3, view_yview + 32*1, "Year: " + string(global.year), color, color, color, color, 1);
draw_text_colour(view_xview + view_wview/3, view_yview + 32*2, "Season: " + string(global.season), color, color, color, color, 1);
draw_text_colour(view_xview + view_wview/3, view_yview + 32*3, "Month: " + string(global.month), color, color, color, color, 1);
draw_text_colour(view_xview + view_wview/3, view_yview + 32*4, "Cycle: " + string(global.cycleCount), color, color, color, color, 1);
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
