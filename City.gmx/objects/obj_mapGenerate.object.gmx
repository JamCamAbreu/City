<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>waterComplete = false;
treesComplete = false;
drawLoadWater = false;
drawLoadTrees = false;

alarm[0] = 2;

seedGrowAgain = 0; // later changed

// set the view to show the whole map:
startingViewW = view_wview;
startingViewH = view_hview;

view_wview = room_width;
view_hview = room_height;

viewComplete = false; // updated after view change complete in step event

SUComplete = false;
waterComplete = false;
treesComplete = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generate trees:

// grow off of the seeds we previously planted:
scr_seedGrow(obj_tree);

// continue seeding:
if (seedGrowAgain &gt; 0) {
    alarm[2] = 2;
    seedGrowAgain--;
}

if (!seedGrowAgain) {
    treesComplete = true;
    drawLoadTrees = false;
    alarm[0] = 2; // go back to alarm[0]
    alarm[2] = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generate Water:

// grow off of the seeds we previously planted:
scr_seedGrow(obj_SU);

// continue seeding:
if (seedGrowAgain &gt; 0) {
    alarm[1] = 2;
    seedGrowAgain--;
}

if (!seedGrowAgain) {
    waterComplete = true;
    drawLoadWater = false;
    alarm[0] = 2; // go back to alarm[0]
    alarm[1] = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Serves as create event

// generate SU's--------------------
if (!SUComplete) {
    scr_generateSU(IDList);
    SUComplete = true;
}    

// generate water-------------------
if (!waterComplete) {
    drawLoadWater = true;
    // begin with seeds:
    var seedAmount = irandom_range(256, 384); // (lower = more chance)
    scr_seed(obj_SU, seedAmount); // use SU for water
    // Grow water seeds:
    seedGrowAgain = irandom_range(2,6);
    alarm[1] = 2;
}

// generate trees--------------------
if (waterComplete &amp;&amp; !treesComplete) {
    drawLoadTrees = true;
    // begin with seeds:
    var seedAmount = irandom_range(192, 256); // (lower = more chance)
    scr_seed(obj_tree, seedAmount);
    // Grow water seeds:
    seedGrowAgain = irandom_range(2,8);
    alarm[2] = 2;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// finished everything:
if (waterComplete &amp;&amp; treesComplete &amp;&amp; !viewComplete) {
    view_wview = scr_ease(view_wview, startingViewW, 0.1);
    view_hview = scr_ease(view_hview, startingViewH, 0.1);
}

if ( ((view_wview - 5) &lt; startingViewW) &amp;&amp; 
     ((view_hview - 5) &lt; startingViewH) ) {
     // fix rounding errors:
     view_wview = startingViewW;
     view_hview = startingViewH;
    viewComplete = true;
}

// destructor:
if (waterComplete &amp;&amp; treesComplete &amp;&amp; SUComplete &amp;&amp; viewComplete) {

    // draw the bars:
    var mainID = global.mainID;
    var PBar = mainID.purchaseBar;
    var TBar = mainID.topBar;
    PBar.drawPBar = true;
    TBar.drawTBar = true;
    
    // draw buttons:
    var IDList = global.mainID.IDList;
    var PBarID = IDList.ds_PBarID
    var sizePBarList = ds_list_size(PBarID);
    for (var i = 0; i &lt; sizePBarList; i++) {
        var PButtonID = ds_list_find_value(PBarID, i);
        PButtonID.drawButton = true;
    }
    
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Loading Bar

if (drawLoadWater) || (drawLoadTrees) {

    // variables to make code nicer to read:
    var x1 = view_wview/2 - LOAD_BAR_SIZE_X/2;
    var y1 = view_hview/2 - LOAD_BAR_SIZE_Y/2;
    var x2 = view_wview/2 + LOAD_BAR_SIZE_X/2;
    var y2 = view_hview/2 + LOAD_BAR_SIZE_Y/2;
    
    var x1Inner = x1 + LOAD_BAR_INNER_PADDING;
    var y1Inner = y1 + LOAD_BAR_INNER_PADDING;
    if (seedGrowAgain &gt; 0) // don't divide by zero:
        var x2Inner = x1 + ( (LOAD_BAR_SIZE_X - LOAD_BAR_INNER_PADDING)/seedGrowAgain);
    var y2Inner = y2 - + LOAD_BAR_INNER_PADDING;


    // black background:
    draw_rectangle(x1, y1, x2, y2, false)
    
    // inner green bar:
    if (seedGrowAgain &gt; 0) // don't divide by zero:
        draw_rectangle_colour(x1Inner, y1Inner, x2Inner, y2Inner, c_green, c_green, c_green, c_green, false);
        
    // string above bar:
    if (drawLoadWater) {
        var loadString = "Generating water terrain...";
    }
    else if (drawLoadTrees) {
        var loadString = "Generating vegetation...";
    }
    
    draw_set_font(ft_consolas18);
    draw_text_colour(x1, y1 - 32, loadString, c_white, c_white, c_white, c_white, 1);
    draw_set_font(ft_default);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
